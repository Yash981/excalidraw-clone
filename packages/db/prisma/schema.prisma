// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  password     String // Store a hashed password (e.g., bcrypt)
  name         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  drawings     Drawing[] // Relation to drawings created by the user
  sharedLinks  SharedLink[] // Relation to shared links
  Collaborator Collaborator[]
}

model Drawing {
  id            String         @id @default(cuid())
  title         String
  description   String?
  encryptedData Bytes 
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  collaborators Collaborator[] 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  SharedLink    SharedLink[]
}

model Collaborator {
  id        String   @id @default(cuid())
  drawingId String
  drawing   Drawing  @relation(fields: [drawingId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @default(VIEWER) // Role: VIEWER, EDITOR, OWNER
  createdAt DateTime @default(now())
}

model SharedLink {
  id            String    @id @default(cuid())
  drawingId     String
  drawing       Drawing   @relation(fields: [drawingId], references: [id])
  createdAt     DateTime  @default(now())
  expiresAt     DateTime? // Optional expiration date for the link
  User          User?     @relation(fields: [userId], references: [id])
  userId        String?
}

enum Role {
  VIEWER
  EDITOR
  OWNER
}
